// Code generated by go-bindata.
// sources:
// data/models.obj
// data/shader.frag
// data/shader.vert
// data/texture.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataModelsObj = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x5a\xcb\x92\x1d\x47\x6e\xdd\xf3\x2b\x2a\x62\x16\x63\x2f\x9a\x95\xef\x87\x97\xb3\xf0\xc2\x1b\x7f\x02\x83\x12\x5b\x63\x45\xf4\xb0\x15\x2d\x51\x0c\xfd\xbd\xcf\x01\xf2\x55\x55\xb7\x6f\x37\x6d\x45\x88\x17\x0d\x24\x12\x48\x24\x32\x01\x54\xe2\x6f\xdb\x3f\x9e\x1e\xbf\x7e\x79\x7c\xd9\xfe\x74\x1f\x73\xda\xfe\xed\xf7\x6f\x3f\x6d\xe6\xdf\xb7\xff\xfe\xc7\x7f\x6d\xff\xf9\xeb\xd3\xe3\x7f\x6c\x7f\xff\xd7\xf3\x97\xc7\xa7\xdf\x3f\xfe\xc4\x71\x7f\xff\xf0\xb7\xed\xfb\xf7\xef\xfa\xc7\xe3\xcb\xc7\xe7\x97\x7f\x7e\x78\xde\xfe\xf9\xf2\xf8\xf8\xf5\xd3\xcf\xbf\xbe\xfc\xfc\xf4\xf8\xe1\xcf\xcd\x7c\x34\xf2\xdf\xf6\x60\x3b\xd4\x81\xdb\xd4\x87\x03\x39\x36\xa4\xf9\x58\x52\x32\x2e\x6e\xf7\xa9\x47\xe6\x8e\x1c\x03\xef\x53\x57\xe6\xa1\x8e\xb9\xa1\xf5\x95\x78\x53\xee\x5d\xb1\x37\xa5\x0e\xe4\xdd\xe5\xbe\xb2\xda\x93\x9e\x37\xcd\x7c\xd3\xca\x0f\xe7\x99\xd3\x76\x8f\x1a\xcf\xcc\x77\x96\x7b\x83\x7a\x60\x3e\x5b\xd2\x6e\xf7\xa8\x17\xb5\x9b\xb6\x80\x42\xe5\x7f\xb7\x44\xa7\x57\x76\xb8\x63\xed\x6d\xe7\xba\x45\x5e\xd8\xff\x80\x4e\x2e\x38\x57\x8c\xac\xac\xa6\x1c\x4e\xc8\x1c\x8c\x77\x49\x91\xc6\xda\xe4\xf2\x09\xe9\x82\xaf\xb1\x08\x7b\x30\xa5\x9e\x90\x39\x38\x63\x62\x63\x37\xc9\x04\x77\x45\x5a\xab\x76\x2d\x26\x95\xc6\xee\x6b\xcd\xf5\x35\x64\x0e\xb6\x7a\xd7\x05\x41\x27\x95\x5e\xca\x05\x99\x43\x34\x7d\x45\xc6\x84\x0a\x2b\x1e\x91\xce\xa7\xdc\xa4\x43\xa9\x74\x42\x66\x0f\x8b\x95\xce\x1e\x43\xf6\x27\xa4\xf3\xc1\x07\x91\x6e\x6d\xa9\x75\xb0\xdb\xa0\xd2\x8d\x33\xb9\xb3\xe7\x12\x4c\x5f\x7b\x1e\x7a\x7a\x23\x82\x42\x28\xd6\xf5\x91\xde\xaa\xa0\x10\x72\x18\xec\xde\x79\x5d\x66\x4a\x76\x98\x2e\x87\xa2\x23\xa1\xc8\x18\x19\xb3\x69\xbb\x19\xfc\x58\x51\x81\x95\x75\x99\x29\xfa\x3e\xb2\x3a\xaf\xd2\x3d\x4c\x33\xb6\x03\x96\x94\x15\x79\x1b\xdc\x58\x51\xd1\x2d\xb6\x26\xd8\x30\x9c\xa1\x7a\x59\x91\x8f\xa9\xf6\x39\x2d\xa6\x0c\xaa\xa7\xc9\x76\x2c\xb3\xe6\xa4\xc8\x50\x9b\xf2\x0e\x03\x9d\xa8\x94\x72\xf1\x0d\x69\x5d\x30\x46\x4d\x07\x6a\x5f\xa6\xb3\xc9\x7a\x19\x59\x43\x37\x32\x86\xf9\xdc\xec\x59\xcc\xd8\xa3\x6c\xab\x13\x3d\x9d\xcb\x63\xed\x39\xbb\xa0\x7b\x64\x06\xbb\x0d\xb9\xea\x6e\x5a\xec\xe1\x50\x3e\x57\x5d\xa6\xc3\x66\x75\x76\xec\x91\xd5\xb5\x97\x10\xc7\x8a\x8a\x6c\x5c\x72\x11\xe7\x64\xb0\x5b\x19\x99\x5c\xc1\x9a\x1a\x32\x15\xe3\x45\xba\xc3\x2a\xed\xe9\x1c\xad\x27\x6e\x9c\x8e\xf5\x1c\x8d\xd3\xb1\xfa\xfc\xf0\xe4\xd5\xe7\x87\x7f\xae\x9e\x2c\x73\x1a\xdd\xcd\x34\xfc\x13\x5e\x97\x4d\xf3\xa5\x32\x2e\x01\xe3\x6b\x50\xa7\x8d\x69\x9c\x0e\x1c\x62\x3d\x32\xf0\x9b\x71\x33\xd8\x18\xe5\x14\xc3\xcf\x6d\xf7\xba\xe4\xab\x93\x03\xeb\x12\x2c\xdb\x77\xd3\x19\x61\x87\xe9\x7c\x69\x6b\xa7\xe1\xd4\x9e\x2e\x46\x3b\x8e\x4c\x4d\xb6\xaa\x3d\x6b\xf7\x25\xe7\x78\x2a\x88\x2c\x21\xf4\x23\x63\x0b\xbc\x41\x0c\xe2\xb0\xcc\x21\x3d\x46\xdd\x4d\x18\xb9\x74\xcb\x3b\x17\xc5\x20\xa9\x4c\x57\x84\x41\x42\xd6\x8d\xcb\xd5\x8e\x65\x96\x6a\xf4\x5e\xb2\xc9\x8f\x7d\xf7\xae\xca\xda\x5d\xc5\x19\xef\x2b\xc2\x76\x57\xf5\x10\xec\xf5\x50\xa9\xe8\x32\x5d\x4a\xe3\x0e\xc1\xea\xa2\x20\xe9\x00\x63\x45\x59\x2f\xd5\x24\x2c\x9d\x3d\x16\x3d\xef\xc2\xd2\x05\xd1\x85\x54\xa5\x32\xae\xca\x6c\x8d\x1c\x99\x2c\xf3\xf4\x65\xd2\xaf\x64\x4e\xce\xd3\x91\xd4\x84\xd2\x85\xe5\xc3\x9f\x5f\x29\x3d\x96\xa2\x59\x46\x4d\xb1\x2e\xe1\x48\xc9\x99\xd3\x0b\xb9\x41\x47\x72\xe3\x79\x18\xf3\xdc\x24\xaf\x52\x6e\x4c\xbe\x4a\x59\xc9\x63\xca\x29\x65\x92\x1f\xae\xf4\x13\xf9\xee\xec\x0f\x6f\x28\xf7\xf0\xe6\xda\xee\x44\xef\x55\xbb\xdb\x86\x7d\x78\xd3\xb2\xe7\xe9\xc7\xec\xbf\x6f\xcf\xbf\xfc\xf2\xe1\x97\xcd\xed\x76\xb7\x5b\xd8\xf1\xbb\xf9\xdd\xef\x16\xb8\xb0\xe3\xef\x2d\xed\x11\xff\xc6\x3d\xed\x0e\xb8\xb8\xe7\xdd\x03\x57\xf0\x6f\xd9\xeb\xee\x81\x2b\xbb\x35\x7b\xd8\xf0\x8f\xb5\xf8\xad\xbb\x75\x7b\x00\x9e\x08\xbf\x23\x55\xc0\xa4\x81\xbf\x10\x11\xf7\x48\x0a\x30\x69\x47\xee\x14\x76\x9b\xf9\x0b\x81\x65\x4f\xa4\x00\xaa\x7b\x26\xc5\x19\xfe\x42\xac\xdd\x33\x29\x80\xdc\x5e\x36\x0c\x74\x9e\xbf\x79\x77\x61\x2f\xa4\x00\x13\xf7\xba\x81\xc1\x25\xfc\x62\x02\x97\xf7\xca\x55\x01\x43\xed\x36\x70\xba\x2a\x80\xdd\x3d\xd4\x32\x24\xba\xdd\x43\x23\x4b\x59\xde\x11\x48\xbb\x87\x78\x2e\x1d\x33\x7b\xe8\xe6\x60\x17\x1f\xf9\x0b\xb6\x84\xdf\xc6\x96\xb1\x30\x19\x53\x04\x80\xc1\x30\x39\x4d\x91\xf7\x80\xd9\x03\x55\x08\x96\x00\x68\x81\xcb\xa7\x9a\x7b\xc0\xec\xcd\xd2\xdd\xc6\x20\xd3\xc8\x6a\xea\x6e\x64\xcc\x12\x61\x5f\xb5\x75\xb7\x32\x90\x09\xd6\x6d\xc6\x1e\x46\x86\xa0\x4c\xdb\x76\x5b\x4f\x1b\x43\x5e\xa1\x6d\xbb\xad\xa7\x8d\xe3\x1e\xc4\xc6\xdd\xd6\xd3\xc6\x60\x35\xb4\x6d\xb7\xf5\xb4\x31\x84\x58\xda\xb6\xd9\x7a\xda\x18\x50\x74\x62\xda\x61\xec\x69\xe3\x66\x51\xac\x2f\xca\xaf\xdb\x63\x68\x16\x56\x88\x56\x8c\x51\x80\xb6\x1d\xeb\xce\x60\xca\x98\x64\x8b\xca\x1e\xb3\x12\x3b\x48\x25\x63\x59\xf7\x8f\xc4\xbe\x95\x58\x75\xac\x02\x98\x3d\x99\x46\x6c\x20\x6c\x98\xec\x71\xbf\xbb\x9e\x43\xab\x1b\xca\x4c\xc1\xb7\xe4\xf5\xb9\x17\x1f\xf2\x7b\x72\xe2\x43\xdd\x99\x16\x27\xb2\x7b\xf2\xe2\x3b\xc3\x9b\xa6\x13\x75\x9f\xc1\xf8\x14\xf8\x8b\x89\xa2\xfa\x50\x83\xe8\x29\x89\xbf\xcd\xdf\x16\xcf\xab\x7b\xca\xc2\x0b\xe6\xd2\x1c\xaf\x81\xdc\xf0\x54\x8f\x6c\xd8\xf1\xac\x1e\x9b\xf7\x6c\x57\xd7\xd5\xad\x6d\x5e\x0c\xf7\x70\x27\x77\x1e\x5a\x76\x9d\xae\xba\x0c\x79\x5d\xca\x41\x60\x9f\xbc\xf3\x3d\x6f\x7f\x3d\x3e\x3d\x3d\x7f\xff\xf4\xfb\x1f\x9f\x5f\xb4\xac\x40\x04\x45\xb0\x6d\x97\x21\x32\xb4\x53\xd5\x51\x6b\xac\x12\xc1\x10\x48\x7d\xc9\x27\xea\x85\xf9\xe1\x3e\xf7\xb1\x44\xbc\x27\xfa\xae\xe4\x37\x04\xdf\x97\x2b\xe5\x99\xad\xa6\xca\x9d\x8f\x22\x20\x9f\x6b\xc4\x0b\xf9\x7e\x65\x7b\xa4\xbe\x8f\x99\xb6\x8b\x05\x49\xd6\x5b\xdc\x3f\x5c\x53\xf7\x99\x4f\x06\xf3\x92\x8d\x12\x70\xc8\xcc\xea\xd9\x22\x67\xf2\x7d\xea\xc3\xdd\xa9\x8f\x65\xa9\xb7\xd1\x57\x49\x53\x91\x9d\xf5\x14\x08\x65\x41\xcc\xf9\x8c\xb4\x2e\x79\xe6\x6f\x29\x05\xdf\xf3\x61\x14\x51\x55\xb3\x5c\xe4\xca\x21\x0d\x76\x24\x54\x67\xa4\xf5\xc8\x14\x85\x3d\x85\xd8\x32\xd2\x50\x0a\xb2\x64\xcd\x5d\x6b\xcf\xf0\x43\xe9\x15\x93\x2f\xa8\x26\x5a\x52\x97\x62\x4e\x52\x96\x22\x5b\xae\x3d\x7b\xcc\xc8\xad\xb5\x3c\xf1\xbe\x17\x5c\x0e\x69\x9f\xcd\xb2\x59\x33\x4d\x45\x05\xe7\x82\x22\x13\x12\xde\x21\xa8\x6a\x25\x62\x7c\xee\x15\xd3\x40\xb2\xe4\xe9\x89\x37\x72\x0f\x54\x03\x17\xa4\x4f\x92\x7c\x42\x4f\xd3\x8b\xa3\x81\x44\xfa\x1d\x7b\x7d\x11\xaa\x09\x25\x5c\x90\x3e\xb6\x12\xd2\xa1\x78\x39\x21\x31\x67\x19\xf5\x6f\x0c\x51\x94\x5f\x91\xa1\x20\xb5\xd6\x4a\x04\x3e\x79\x46\xa2\x94\x28\xb1\x97\x51\x31\xa1\x7a\x3a\x23\x13\x86\x6a\x8e\x8d\xfa\xb2\xef\x51\x41\xc1\xa6\x95\x1d\x4a\x92\x3c\x90\xce\xd8\x96\x39\xf7\x6c\x1c\x05\xa6\x09\x2a\x08\xa6\x1b\x7a\x42\xbd\x57\x91\xa8\x83\x72\x1e\x7a\xc2\xca\x5a\x9a\x41\x8e\x3b\x21\x59\x85\xf5\x42\x86\xe5\x4b\x08\x1d\x69\xfa\xc8\xd4\x2c\x8f\xed\xa8\x73\x99\xa9\x95\xf9\xce\xf4\x62\x13\x2e\xd7\x2d\x0f\x95\xdb\x8a\x70\xe7\x78\x71\xb0\xd5\x93\xb1\x71\x45\x8a\xf7\x84\x92\xc9\xf7\x91\x39\x2a\x7b\x0e\xc9\xce\x8d\xcb\x56\xa4\xdf\x1c\x19\x03\x0a\xb6\xae\x27\x6a\xef\xd2\xf6\xa8\x8c\x32\xbf\x96\x5c\xe2\x09\xe9\x83\x09\x52\xd1\xaf\xa7\x03\xca\x27\xa9\x83\x52\x84\x07\xd9\x2e\x08\x25\x88\x2e\x13\x37\xd0\xd8\x8e\x64\x8a\x7b\x6d\x24\x34\x43\xc5\x35\x54\x42\x05\x2d\xd2\xb3\xeb\x1f\x2e\x50\x7a\xa7\x76\x10\x26\x92\x47\x37\x6b\x49\x3e\xbf\xa5\x84\x12\x53\xd5\x13\x07\x6c\x3d\x9d\x8e\xc3\x39\xea\x3e\x7f\x3c\x1d\xcd\x93\x57\x9f\x1f\xfe\xb9\x7a\x32\xfc\x33\xaa\xd3\xb2\x18\x3c\x7b\xdd\xea\x4b\xc3\x43\x8e\xbe\x94\xa3\x8f\x0d\x49\x3d\xdf\xac\x30\xee\x54\x08\xad\x7c\xb1\x28\xf3\x8d\xde\x64\xfe\x5a\x7e\x58\x5f\x9c\x16\x4f\x58\xf8\xb5\x70\xbb\xc3\xfc\x16\x6f\xb6\xa5\x15\x36\x09\xdb\x7c\x9d\xba\x38\x9d\xd1\x96\x4b\xd9\xf3\xf0\x06\xf7\xc3\x7d\x76\xa8\x9b\x45\x33\x7e\xd5\x1c\xd0\x81\xfd\xce\x80\x5e\x58\x21\xe3\xcb\xc8\xf4\xe2\x86\x14\x30\x07\x02\xa8\x02\x32\x12\x26\xe6\xe8\x48\x15\x33\xf2\xb8\xb4\xa1\x90\xc8\x99\x00\xaa\x81\x8c\x5c\x8d\x69\x3a\xb2\xab\x8c\xec\x29\x6f\xc8\x0b\x8b\x11\x20\xee\x05\x29\x13\x33\x75\x4c\x52\x90\x7d\x95\x0d\x29\x77\xf1\x02\xa0\x28\xc3\xfc\x4c\xd6\x91\x57\x15\x48\xa8\xc2\x90\x04\xc0\x14\x98\x9f\xf9\x3a\x24\x14\x24\xf1\x66\x43\x8e\x5e\xaa\x00\x6e\xaf\xc8\xdd\x8d\x6a\x5b\x2d\xaa\x01\xc1\x39\x01\xcc\x5e\x3d\x00\x12\x51\x00\xa0\x4c\x71\x32\x2a\x0a\x80\xe2\x84\xa5\x02\x89\x61\xaf\xa8\x16\x3c\xd7\x54\x59\xa2\x51\xa1\x8a\xf9\xbd\xae\x13\xd6\x45\x2d\xc1\x61\xd6\x58\x42\x28\x1f\xac\x81\x08\xc9\x25\x09\x43\x0a\xac\x44\x28\x10\x62\x52\x68\x20\x85\x76\x12\x18\x82\x92\xd2\xb3\x40\xb0\x84\x81\xa0\xa4\x0b\x46\x08\x15\x2b\x33\x1b\x37\x02\x35\xc3\xab\xb1\xc4\xe2\xb4\x87\x95\x0a\x69\x72\xa8\xea\xba\x33\x2c\x5f\x58\x2e\x1d\xf7\x88\x39\xbf\xec\x20\xb5\xb4\x61\xdd\xcb\xc3\xfe\xb2\x48\x50\x29\x9d\x63\x15\xbd\xa8\x38\x15\x9b\x73\x0f\x1d\x56\xb5\xb9\x16\x71\x0f\xc7\x22\x48\xfc\xa3\x7b\x8c\x6e\xa4\xb8\x0a\x37\xd7\x5a\x81\x06\x07\xe7\xee\x2e\xc5\x5a\x0c\xc9\xf6\xc9\xb9\x80\x44\x75\xc5\xb9\x59\x4a\xda\xd5\x09\x57\xc7\x74\xac\x7e\x9d\x30\x77\x8e\x55\xf4\x54\x71\x55\x6c\xcc\x3d\x75\x58\xa8\x58\x1d\x6a\x07\xb8\xf3\x74\xf0\xc5\xaf\x59\x31\xd1\x8d\x17\x0f\x5f\x1c\x9b\x65\x94\x78\xf6\x74\xf1\xc5\xb3\x31\x07\x06\xc3\xa3\xa7\x8f\x2f\xae\x0d\x85\xb1\x83\x74\xe9\xe1\xe4\xd3\xb7\xc5\x0a\x45\x7c\x7a\x78\xf9\x74\x6e\x3a\x86\xab\xe2\xdd\xdd\xcd\x17\xef\xa6\x46\x5e\xbd\x7b\xf8\xf9\xc1\xbb\x49\xb7\xf4\xe9\xe9\xe7\xab\x77\x53\x36\x14\x75\x69\xf5\xf3\xe1\xdd\xcf\xdb\xcf\x7f\x7d\xfe\xfa\xe9\xdb\x6f\x9f\x3e\xbf\xbc\x3c\x7f\x3f\x3c\xf6\xdc\x7f\x28\xbc\x45\xbc\xc5\xfb\xfe\x0a\xe2\xbe\xe0\xfb\x53\x33\x30\xe5\xc8\xf4\x44\xae\x7a\x9f\xfb\xb7\xf7\x1c\x19\x0f\x05\x28\x48\xa7\x15\x59\x01\xca\x47\xd4\x1c\x91\xfb\x36\x24\x02\x9c\x95\x0f\xdd\x48\x22\xa2\x0b\x1d\x89\x20\x17\x4e\x73\xd6\x8a\x2c\x58\x91\xcc\xbc\xdb\x75\x5d\x6a\xd0\x00\x13\x90\xe8\x5d\x6e\xfb\xfb\xd4\xcb\xd2\xde\xf9\x81\xed\x8d\xd8\xdb\xc3\x44\xe0\x97\x24\x78\x06\x4e\x05\x3f\x07\x04\x81\xe8\x37\xf0\x11\x39\x17\x49\xe9\x38\x17\x55\xe9\x65\x8b\x46\xe9\x72\x32\xb2\xd2\xab\x62\x03\x21\x19\x09\x7a\xed\xfc\x69\xf7\x46\x67\x0d\x02\x29\xdd\x9b\x2e\x3f\xef\xde\x76\x7e\x40\x32\x27\xe8\xb6\xf3\x17\xd1\x6a\x6a\xba\xea\x57\x94\x5e\x16\x4d\x0f\xfa\x45\xa5\xd7\x45\xd3\xa9\xdf\xf3\xf6\xd3\xd3\xb7\xc7\x4f\x5f\x9e\xbf\x7f\x1d\x5e\x7e\xff\x35\xfc\x8a\xfc\x81\xb7\xf2\x1b\xcc\x37\xbd\xfc\xae\x93\xbf\xe6\xe3\x11\x65\x86\x3c\xcd\xd1\x85\x7b\xe6\xc8\x87\x32\xa9\xff\xc4\x9d\x5b\xe6\x88\xb3\xa0\x9e\xcb\x63\xd1\x6b\x35\xbe\x0f\x88\xe3\x23\x1b\x1a\xaf\x70\x09\xc5\xa7\xbc\x5d\x64\x24\xf9\x7d\x64\x72\x36\x69\x51\x88\x54\xdc\xd7\xa3\x8f\x3f\xdc\x77\xf2\xd7\xc8\xef\x72\xe3\x77\x1e\x81\xab\x93\xf3\xdb\x1a\xee\x6b\xd4\xd1\xfc\x1a\x88\xcb\x8e\x10\xbf\x01\x59\x40\xa4\x47\xa5\x7b\xc5\x1a\x81\xbc\xd2\x7d\xa3\x23\x40\xe0\x0a\xe0\x17\x47\x8e\x0c\x3a\xd2\x03\x22\x3d\x29\x36\x8a\x24\xf2\x47\x19\x49\xfe\xd8\xe4\x93\x3f\x8d\x91\x49\xe7\x87\xbb\x33\x34\xc9\x58\x27\x5a\x4d\x4d\x57\xfd\x92\xd2\xfd\xaa\xe9\x0d\xfd\xe2\xaa\xc9\x90\xff\xbc\xfd\xf6\xed\xe5\xb7\x27\xb8\xf9\xaf\x9f\xff\xf5\xfc\xf5\xcb\xfb\x3b\x3e\xfe\x4f\xed\x20\xf7\x3c\xfc\x46\xbb\xc0\xfb\x9b\x09\x7e\x94\x7a\xea\x04\xc0\x01\xf0\x55\xee\x6d\x96\x46\xa3\xb4\x09\xf2\xce\x5b\xf2\x7c\xbd\x0d\x15\x15\xbb\xdf\xf4\x83\xd9\x78\x2a\xe5\x83\x9e\xd5\xdb\xde\xf5\xaf\x2b\x28\x15\xf5\x75\x0c\x65\xa8\x8f\x83\x1d\x55\x92\x1e\xb9\x8c\x02\xad\xd5\x7a\x05\xb5\x66\xd1\xa0\x33\x1e\xbe\x43\xf5\x3e\x24\x91\x5e\xc7\x17\x06\x9f\x6a\xaf\x4a\x50\xb5\x75\x64\xae\x83\x3d\xd5\x30\xeb\xb2\x14\x94\x1d\xe7\xb9\x8f\xc4\x75\x9a\x54\xf9\xd9\xc6\x80\x3a\x55\xca\x4f\xc6\x2c\x33\x4a\xef\xec\xe4\x7b\x11\x0c\x62\x38\xf2\xe6\x73\xd3\xfd\xa7\xae\xff\xdf\x63\xd0\x0f\x54\x82\xf7\xe6\xee\xa7\x9c\x1f\xbd\xf9\x7e\x91\x37\x7e\x65\x47\x38\x00\xc4\x0f\xf5\xb8\xf8\x3d\x43\x85\xc0\x65\xf7\x65\x93\xaf\xdb\x51\x20\xaf\x23\xcb\xc2\x8f\x50\xc6\x8f\xc7\x55\x20\x04\x0d\x84\x13\xcf\x50\x46\x2c\x4e\x65\x30\x32\x12\xe7\x8b\x10\x53\x7e\x0f\x88\x74\x8e\x0d\x3b\x6c\xca\xf9\x71\x26\x01\x51\x26\xce\x64\x90\x6f\xfd\x2a\x35\x38\x19\x89\xf9\x09\x55\x99\x3f\xf0\x94\x73\x2e\xea\x97\x97\x95\xac\xfa\x0b\x3d\x53\xeb\x65\x25\xab\xfe\x6d\xd5\x75\x5d\xc9\xa2\x3f\xc7\x46\x7e\xf4\x5e\x57\xb2\xe8\x4f\x7e\xcc\x4c\xad\xc7\x4a\x0e\xfa\xab\x2c\x68\xbd\xac\x64\xe8\xff\xbc\xbd\x3c\x7e\xf9\xf4\x3f\x8f\x9f\x5f\xfe\x78\x3b\x88\x32\x88\x54\x83\x0c\xfc\xa1\x7d\x7f\xa8\x3f\x12\x45\x6f\x70\x9f\xbf\xa1\xdf\x9b\xfc\x2e\x33\x6b\xf3\xc0\x9a\x5c\xb4\x40\x52\x5c\xce\xdf\xfe\x4f\xd4\xd3\x37\xf6\xd7\x79\xef\xb3\x72\xe6\xec\xab\x3c\x96\x3b\x1c\xf6\x78\x91\x7b\xa2\x9e\xe4\xe2\x52\x91\x06\x8b\x2b\xef\x95\x78\x96\xeb\x3d\x2a\x44\x26\x0b\xb1\xc4\xe4\xce\x72\x4f\xd4\x93\x5c\x93\xab\xf3\x37\x79\xaf\xc4\x93\x5c\x00\xc5\x96\x77\x93\x8f\x1d\x7a\x36\x79\xb9\xbc\xb2\x71\xb5\xc4\xfb\xc4\x53\x7c\xca\xa5\xea\xc7\xb4\xf7\x50\x4f\xdd\x6a\x0e\x0e\x23\x7d\x17\x15\xe3\xde\xa2\x9e\x17\x94\x93\x76\x2f\xbd\x8f\x7c\x50\x2b\x22\xa6\x48\x00\x80\x29\x4c\x0c\xf7\x89\xa7\x97\x08\x97\x93\x73\xef\xa5\x9e\xda\xeb\x60\x0c\x69\xc0\x28\xa1\x1a\x73\x76\x8d\x33\xf5\xf2\x7c\x52\x92\x34\xd3\xbc\x8f\x7c\x0c\xd7\xc6\xf8\xda\x2a\x36\x04\x2f\x33\xfb\x80\xb4\x49\x04\x51\xd4\x8e\x1e\xbd\xa8\x5f\x76\x57\x24\x6a\xea\x2c\x9f\xa5\x11\xe0\x43\x19\x3d\x50\xad\xb3\xa9\x24\x36\x95\x35\x64\x44\x2d\x20\x1b\x5e\x83\x1d\xd1\x3e\xb0\xe2\x93\x39\x7d\x19\x3d\x3b\x21\xba\xa4\x2a\xb1\x57\xac\x23\x53\x14\xe9\xa5\x3a\x28\xdc\xa4\x7b\x9f\xa4\xe9\xa6\xc6\x14\xec\x68\x0a\x33\x41\x1a\xcd\x4a\xb2\x98\xe7\x34\xe7\x51\x90\xc3\xa1\x13\xa4\xab\x73\x99\xc1\xb5\x72\x73\x95\xde\x90\xc7\x91\xde\x9b\x2c\x23\x61\x83\xd1\x8e\x17\xbd\xd7\xa4\x26\xa4\xa5\xd9\xca\x59\x9d\x33\xd9\xd1\xd5\x65\x92\x69\x49\x0d\xee\xc7\x29\xdd\xd8\x56\x16\x07\x33\x3a\xc5\x82\x3e\x32\x60\xce\xe2\x47\xe7\x9d\x1f\x7a\x96\x90\xa6\xa0\xa0\x2a\xc5\xd1\xbc\x06\x64\xd1\x3a\x02\x82\x7c\x9d\x82\xba\xf4\xa5\x7d\xcc\x39\xb9\x0a\x20\xc8\x85\xba\x78\x88\xe6\x59\xc1\xb8\xd1\x8e\x97\x8d\x74\xc9\x01\x89\x3a\x7e\xec\x91\xf3\x3a\xd2\x19\x3f\x0c\x42\xbf\x39\xd9\x13\x0e\xa6\xad\x9d\xf2\x56\x3a\xd6\xee\x4c\x6d\x7a\x66\x3f\x8d\xec\x72\xfb\xa2\x60\xc2\x74\x5a\xec\x71\x5b\xa6\x9d\x06\xb1\xcd\xc8\x28\xb1\x86\xf2\xb9\x5a\xd5\xd3\xd7\x68\xe7\x6e\x86\x86\x2c\xa3\x9f\x0e\xa6\xcb\xf9\x72\x10\x7c\x74\xcd\x3f\x8d\x99\x07\xc1\xb4\x65\xfa\xb4\xf8\x52\xa8\x6d\x45\xce\xf9\x69\x4f\x79\x9c\x04\x32\x8c\x56\x44\xe3\x72\x6c\x87\x0b\x15\xe0\x30\x9d\x35\x2a\x28\x95\xf1\x74\x10\x50\x14\xb6\x83\x30\xbb\x0e\x11\x4b\x73\x6d\xcb\xb4\x69\x1a\x24\xfb\x8b\xf2\xa1\x3d\xeb\xc5\xe9\x21\x8b\x27\xd3\x2b\x3a\xd2\x6a\xde\x5a\x2b\x26\x0f\x73\xdf\x8b\xbd\xcc\x09\x23\xa5\x66\x4f\x63\x2f\x47\x66\x8e\xb4\x4c\xda\x65\x45\x09\x9b\xd5\x3b\xef\x70\xe5\xea\x2b\x16\xf2\x01\x37\x1a\xf7\xa2\x15\xff\x2c\xa8\x9c\xe3\x6c\xbf\x75\xf2\x5c\x56\x0d\xae\x98\xd9\x64\xe7\x75\x99\x1e\x93\xf7\xa3\xed\x9d\x95\xb7\x94\x9a\x6d\xe9\x96\xe7\x6b\x5a\x6e\x5f\x92\xca\x68\x88\xcb\xd0\x49\xdc\x06\xe3\x7c\x6f\xc7\x33\x41\x1f\xd6\xe0\x87\xa5\xbf\xcb\xc1\x6b\x8a\x96\x26\xf8\x19\x6d\x83\xb1\x9f\xf7\x6c\x97\x2d\x4e\xda\x69\x5b\x2d\x42\x7e\x67\x87\xb3\x48\x60\xac\xd8\x69\x37\xda\x45\xe1\xd6\xb2\x71\xd8\xf6\xfe\x08\x86\x8b\xd6\x94\xac\x82\x4c\x32\x73\x8b\x53\x3e\xdd\x36\x86\x2f\xc4\x72\xad\xe1\x38\x3b\xd7\x8d\x9c\xb4\xb1\x34\xe3\x18\x8d\x4b\x15\x59\x97\xdc\x21\x98\x31\xba\x61\x25\xb0\x8b\x20\x5c\x30\x7d\xed\xce\x21\x02\x8a\xe9\x62\x4d\xb1\x8f\xb4\x6c\x6c\x15\xe5\x67\x9f\xaf\x4d\xb8\xb6\xc5\x43\x4a\x0c\xbd\x84\x42\x6e\x9d\xbd\x2e\x13\xe7\xb9\x23\x6d\x7b\xe7\x04\xb2\x74\x41\x06\x97\x61\xd2\xed\x28\x08\xa2\x7d\x45\xa9\xc8\x4b\x23\xdc\x6c\x74\x47\x1a\xde\xe8\x32\x67\x2a\xe3\x9e\x87\x3d\xa2\x1e\x6d\xd4\x8c\xa3\x73\x19\xe5\x9b\xf4\x27\x56\xa8\x1b\x07\xb2\xb8\xa4\x97\x3f\x3f\xb4\x9c\x62\x1c\x2a\xc5\x5c\xeb\x05\x39\x23\xc2\x82\x5c\x8f\x4c\x0a\x1a\xb9\x10\xe3\xfc\x0c\x91\x39\xb6\x3b\x64\x28\xcf\x4b\xa0\xe8\x25\x00\x5f\x1a\x48\xaf\xb5\x2f\x0e\x6c\x9d\x3d\xb9\xce\xa5\x73\xe8\x41\x50\xae\x46\xf7\xbd\xcc\x87\x5f\x3e\xfe\xeb\x31\x84\xab\xcc\x9b\xc1\xb7\x39\x63\xf4\x53\x50\x6d\x73\xc6\xd1\x44\xc0\x3e\xdf\x56\xd1\x62\x99\x4b\xcf\x78\xbc\xc6\x38\xdc\x08\x7a\x5d\xb8\x3c\x3e\xa9\x26\x67\x5a\x5f\x22\x7b\xcf\x2f\xa5\xe6\x1b\x64\x85\xb7\xd7\x2a\x51\xf6\xe4\x2a\x37\x6e\xd2\xeb\xd3\x60\x67\x7a\xed\xcd\xf2\x0d\x76\x06\xdb\xc6\x5e\x4a\xbc\xf1\x36\x58\x93\xef\xf4\x1b\xbd\xac\x35\x55\x65\xc2\xf5\x76\xa3\x21\x53\x6e\x06\x79\x59\x84\xb9\xae\xe4\x22\x11\x63\x93\xde\x8c\x1b\xe4\x88\xcd\x12\x2c\xe2\x4f\xba\x7e\xc4\x43\xcc\x14\x64\xf4\xf1\x86\xe2\xb9\x34\x1e\x84\xdb\x6b\xa7\x69\x7b\xa9\x94\xc7\xcb\xeb\x63\xec\xc9\x92\x17\xbd\x90\x3a\xa9\x5e\x3e\x5f\x4d\xf2\x06\xf5\xb5\x35\x8d\x0f\x07\x2c\x72\x51\x8e\xfb\x8d\x2d\x6c\x28\x89\x09\x45\x40\xec\x9c\x24\xbd\x2a\x3d\x28\xd6\x08\x94\x95\xce\xcf\x7f\x7c\x07\x45\xc9\x8d\xc8\xcf\xa7\x34\x94\xc9\x84\xf8\x0e\x85\x12\x9a\x9f\xff\x04\x46\xb9\x9c\x94\x9e\x04\xf2\x3a\x27\x3f\xff\xc9\x53\x15\x0a\xf3\xbc\xf1\xbd\x09\xda\x00\x22\x3d\xb1\xc7\x92\xf2\xd3\x6e\x31\x47\x28\x1b\x3b\xe5\xc8\x0f\xc8\x29\x3f\x0b\x7f\xce\x0a\x0a\x62\x2a\x1f\xc7\x40\x21\x94\x95\xce\xc2\x9f\x5c\x98\x0f\x77\x05\x9f\x04\x31\x9a\x50\x12\x7a\x64\xe1\xcf\xe7\x2e\x50\x70\x9a\xe5\x35\x2c\x11\x22\x7f\x66\xef\x25\xf9\xc9\x55\x76\x5c\x2b\xf2\x6c\xc6\xbe\xcb\x8d\x0f\xc3\xf8\x3f\xf2\xc3\x85\xbc\x92\xd9\x3d\xfa\xad\x40\x3e\x66\x23\x04\x7e\xd8\x25\x4a\x9f\x2e\xb1\x90\x1a\xb6\x0a\xa9\x25\x0a\x84\x39\x0b\x24\x85\x26\x1f\xe3\x63\xdc\xf8\x68\x8c\xd1\x84\x48\x87\x24\xb1\x1f\xa4\x56\x76\x64\x6e\x85\x90\x25\x84\xbf\x6d\x85\xa4\xd4\xec\x5f\x21\x2b\x6f\xa0\xd9\x1a\x04\xc2\x9c\x90\x11\x69\x3f\x4a\xad\x6c\xda\xdc\x2a\x47\x66\x81\xa0\x73\x85\x24\xe9\x31\x35\x9c\xac\x0a\x9a\x0f\xd3\x46\x20\xbe\xe3\x59\x1d\x20\xcf\xd5\x6c\xec\xdc\xf8\x06\x67\xbc\x40\xa4\x43\x14\x0d\xcc\x57\x3d\x13\x77\x24\xf2\xc2\x9f\x08\xc9\x7b\x9c\xc9\x00\x39\x80\x5d\xc5\xec\xfe\xa4\x06\xc8\x26\x09\x61\x85\x8e\xdd\x9b\x56\x77\xd8\xb1\x6f\xd6\xaf\xbe\xb8\x78\x20\x76\x5f\xe8\x61\xf5\xc5\xc5\x03\x13\xdf\x17\xc5\x03\xc1\x8f\xcc\xf3\xe2\x81\x7c\x52\x0f\x82\xa5\xa4\x48\x68\x78\x2d\x17\xc8\xf9\x13\xb1\x7c\xb5\xb4\xf9\x30\x92\xfa\x73\xd6\x22\x74\x2c\x90\x1d\x94\x27\xfe\x71\x02\xb0\x8f\x28\x74\x64\x24\x5f\xea\x6d\xe3\x1f\x5c\x34\x95\x73\x67\xfe\xa9\xd5\x94\x7f\xa0\xf7\xb5\x2c\xeb\x3b\xd0\xf9\x82\xea\x8f\x27\xf0\xa0\x1f\xdf\x53\x85\x1f\xbe\xe6\xdc\x65\xfd\x43\x57\xd9\x29\x97\x2e\xf4\xa1\xd5\xb4\xc4\xed\xf5\x2f\xfc\x5d\xa6\x7a\x78\x93\x3a\x35\x5d\xf9\x97\x5d\x1b\x3b\x75\xa0\xc3\x7e\x2e\xcb\xbd\x31\xef\x92\xe5\x06\xa1\xff\x38\xb9\x37\x12\x57\x52\x05\xe2\x2b\xb1\x69\x37\x48\x87\xe7\xbd\x32\xef\x9a\xe3\x0d\x84\xfd\xf1\xf6\x4c\xa7\xaf\x7a\x47\x2c\xfd\xd7\xfb\x33\x9d\xef\xd5\x3e\x08\x96\x2d\x18\xf1\xc2\x3f\xee\x35\x36\x77\xf8\x44\x48\x0e\x88\xcf\x3a\x60\xfe\x21\x47\xcc\x97\xcb\x0c\x5c\x81\xe8\x8d\xdb\xc0\x05\x5d\x0b\xb4\x0a\xb6\xad\xa0\xc3\xbc\xed\x90\xef\x9c\xf9\x17\x0b\x0d\x5b\x1c\xe6\x9f\xeb\x1e\x6b\x7d\x65\x05\x53\xbf\xae\x13\x2d\x30\xec\xb2\xd8\x62\xb5\xf0\xd0\x6a\x6a\x72\x7b\xfe\x65\xa5\xcb\xfa\xe8\x21\xc1\xf3\xe6\x5f\xa2\xc1\x1a\x03\x20\x3f\x04\xb9\xf9\x67\x34\x58\x63\x00\x7b\x02\xa2\xdc\xfc\x33\x1a\x2c\x31\x80\x7e\x19\xe4\xe6\x9f\xd1\xe0\x10\x03\xa0\x35\x1b\xfe\xdd\x12\x0d\x0e\x31\x80\xf2\x8b\xdc\xfc\x33\x1a\xac\x31\x80\x1d\xfd\x95\x37\xff\x12\x0d\xd6\x18\xc0\x3e\x05\x23\x37\xff\x8c\x06\x4b\x0c\xe0\x0d\x15\xe5\xe6\x9f\xd1\xe0\x10\x03\xd8\xbb\xe3\x78\xf3\x2f\xd1\x60\x8d\x01\xec\x79\xf0\x72\xb1\xcf\x68\xb0\xc4\x00\xee\x6a\x0c\xc4\xae\xd1\x60\x89\x01\xbc\x02\x62\xe4\xcd\xbf\x44\x83\x35\x06\xc0\xc0\x51\x6e\xfe\x19\x0d\x0e\x31\x80\xf7\x41\xcc\x12\x03\x46\x34\x98\x31\xe0\x7f\x03\x00\x00\xff\xff\x00\x0b\x77\x6c\xd8\x3d\x00\x00")

func dataModelsObjBytes() ([]byte, error) {
	return bindataRead(
		_dataModelsObj,
		"data/models.obj",
	)
}

func dataModelsObj() (*asset, error) {
	bytes, err := dataModelsObjBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/models.obj", size: 15832, mode: os.FileMode(420), modTime: time.Unix(1447036196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataShaderFrag = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8e\xc1\xaa\x83\x30\x10\x45\xd7\xe6\x2b\x2e\xbc\x8d\x3e\x44\x1e\xfa\x76\xd2\x95\xfe\x47\x49\x35\xa6\x03\x9a\x29\x63\x22\x85\xd2\x7f\x6f\x14\x9b\xdd\x70\x38\xf7\xde\xf9\xd9\x8c\xac\xc4\x0e\x4d\xf3\x87\x81\xc5\x28\x15\x1c\x4d\x2c\x0b\x56\xbd\x3c\x66\x23\x75\x8f\x70\xf5\xe6\xe9\x83\x98\x56\x29\x72\xd8\xcc\x50\x23\x92\x8e\x59\xc6\xf6\x24\x0d\x66\xb2\x77\x4f\xce\x46\x89\x83\xdf\xd9\x3f\x26\xd1\xb6\xe3\x99\x25\xc2\x8d\x69\xc4\xa2\xc9\xe5\xfb\x55\xe0\xa5\xb2\xc3\x39\x9a\xa2\x82\x0b\xce\x99\xba\xcf\xd3\x64\x99\x96\x8a\x56\x65\xa9\x2f\xca\x7b\x38\xff\x86\x2b\xb1\x37\xfc\xa6\x1f\xca\xd4\x5a\xe9\x98\x7b\x7f\x02\x00\x00\xff\xff\xb8\x90\xd9\xf4\xe7\x00\x00\x00")

func dataShaderFragBytes() ([]byte, error) {
	return bindataRead(
		_dataShaderFrag,
		"data/shader.frag",
	)
}

func dataShaderFrag() (*asset, error) {
	bytes, err := dataShaderFragBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/shader.frag", size: 231, mode: os.FileMode(438), modTime: time.Unix(1447550644, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataShaderVert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xcb\x4e\xeb\x30\x10\x86\xd7\xc9\x53\x8c\x74\x36\xce\xa1\xaa\xd2\xa6\xbb\x88\x15\x5b\x40\xac\xba\xad\x4c\xe2\x96\x41\x8e\xa7\x72\x9c\x90\x82\x78\x77\xc6\xb9\x14\xd3\x06\xb1\x1b\xfd\xfe\xe6\xf6\x8f\xff\xb5\xca\xd6\x48\x06\xb2\x2c\x85\x82\xac\x8a\xe3\xc6\xe0\x9e\x6c\x05\x95\x74\x1b\x68\x76\x47\x4b\xaf\xaa\x70\xcc\x6c\x51\xbd\x3d\x48\x67\xb1\xcb\x2f\x21\xc3\xb1\xd4\xbf\x3c\x56\xa3\x7c\xd6\x5b\x55\x64\xac\xcb\xea\x19\x95\x71\xf7\x78\x78\x71\xf9\xe5\x63\x89\x76\xe8\x2a\xf5\x9f\xc0\x96\x03\xb2\xdc\x40\xcb\x13\x35\x0e\x84\xa6\x42\xfa\x27\xb8\x85\x34\x01\x34\x3e\x67\x03\xb8\x3b\x52\x8d\x5e\xcf\xe7\xc8\x55\x48\x0e\x0b\xcd\x72\xeb\x89\x5b\x33\xe7\x54\x77\x47\x64\x4b\x6e\xee\xb9\x5e\xfd\xd6\x46\x29\x03\xed\x57\x40\x73\x60\xac\x25\x2c\xd9\x19\x34\xc2\x47\x09\x7c\xc4\xd1\x41\xef\x9e\xc6\xc9\xb8\xfe\xbc\xe5\xf0\xff\xec\x24\x87\xe1\x2a\x71\x34\x35\xe4\xe4\x1f\x13\x45\xfd\x32\xce\x4a\x53\x7b\xe7\x54\xf9\xd8\x6f\xd5\xf7\x08\x2f\xc6\x05\x3d\x29\xa6\xb5\x97\xdd\xe9\x7d\x01\xab\x65\x9a\xe4\x71\xb4\xd7\x24\x1d\x04\x6e\x73\x7a\x25\x3b\x51\x92\x13\x57\xa5\x87\xcc\x99\xe3\x24\x0b\x48\x87\x7a\x93\x15\xfd\x14\xe1\x17\x80\x1b\x10\xd7\x77\xe7\xd9\x02\x89\x0b\x7c\x7e\x05\x00\x00\xff\xff\x27\x5b\xfd\xc9\xb3\x02\x00\x00")

func dataShaderVertBytes() ([]byte, error) {
	return bindataRead(
		_dataShaderVert,
		"data/shader.vert",
	)
}

func dataShaderVert() (*asset, error) {
	bytes, err := dataShaderVertBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/shader.vert", size: 691, mode: os.FileMode(438), modTime: time.Unix(1447550601, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTexturePng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x0d\x20\xcc\xc1\x06\x24\x0f\xdb\x25\x9e\x66\x60\x60\x0c\xf0\x74\x71\x0c\xa9\xb8\xf5\xf6\xb6\xa3\x50\xb3\x02\x0f\xeb\x85\x25\x8f\xff\xae\x9f\xf3\x2e\xf6\xc6\xc2\xae\xcc\xa7\x7b\x99\x39\x8c\xea\x99\x56\xaa\x6a\x2f\x5a\x14\xfa\xfe\x83\xe4\xc6\x4f\xaf\x8f\x6b\x47\xcc\x62\xe0\x60\x60\x6a\x60\x50\x00\x52\xab\x6f\xa6\x7d\x3d\x63\x7c\xeb\xb6\xcc\x0c\x47\xdf\x59\x8e\xaf\xb9\x9e\x1c\xf8\x11\xaa\xc5\xc0\x74\x60\x6a\xf4\x81\x37\x42\xf6\x66\x75\xff\x79\xaa\xda\xf5\x45\x19\x18\x1d\x18\x32\x2c\x99\x53\x3e\xbf\xab\xb8\x22\x74\xcd\xd7\x38\x23\xb6\x71\xf1\xb4\x82\x07\x35\x0b\x98\x6e\x30\x6d\x60\xcd\x60\xde\xda\x78\x83\x49\x80\x81\x05\xa4\x4c\x80\x21\x6c\x42\x1e\xdb\xd1\x53\xeb\xd7\x33\x41\xc5\x12\x4e\xea\x2d\xf8\xbd\x39\x6a\xab\xfe\xc1\x8f\x3c\x46\x9f\x43\x16\x07\x94\xfe\xb9\xf9\xee\xcd\xe7\x50\x90\xdc\x03\xef\xd9\xaa\x33\x76\xab\xbf\x9f\xff\xfd\xa5\xcf\x02\x26\x90\x83\xec\x7f\x5a\x1f\x68\x79\xfd\x51\x59\xfa\x11\x90\x9c\x78\xf3\xbf\x63\x00\xab\x03\xc3\x8f\xed\x66\x1f\x24\xbf\x2b\x85\x30\x78\x83\x94\x9c\x63\x78\xcc\x9b\xf2\xfa\xe7\x83\x45\xaf\x3f\x6a\x35\xa8\x0a\x30\xe4\x30\xde\x72\x10\x85\xd8\xcd\xc2\x10\x7b\x40\xeb\xdb\xff\x8b\xb3\xff\xda\xff\xdd\x7d\x3c\x98\x71\xc7\x06\xa6\x17\x7f\xe7\x32\x16\xb0\x15\xa8\x59\x7c\xb4\x01\x2b\x22\x04\xe4\x1e\xf3\x3e\xf2\xf2\xab\xd8\x31\xe5\x1a\x0b\x88\xeb\xe9\xea\xe7\xb2\xce\x29\xa1\x09\x10\x00\x00\xff\xff\x5d\xc1\x5d\x45\x89\x01\x00\x00")

func dataTexturePngBytes() ([]byte, error) {
	return bindataRead(
		_dataTexturePng,
		"data/texture.png",
	)
}

func dataTexturePng() (*asset, error) {
	bytes, err := dataTexturePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/texture.png", size: 393, mode: os.FileMode(420), modTime: time.Unix(1447577793, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/models.obj": dataModelsObj,
	"data/shader.frag": dataShaderFrag,
	"data/shader.vert": dataShaderVert,
	"data/texture.png": dataTexturePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"models.obj": &bintree{dataModelsObj, map[string]*bintree{}},
		"shader.frag": &bintree{dataShaderFrag, map[string]*bintree{}},
		"shader.vert": &bintree{dataShaderVert, map[string]*bintree{}},
		"texture.png": &bintree{dataTexturePng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

